# 1) load packages devtools, openxlsx, RPostgreSQL, dplyr

install.packages("devtools")
install.packages("openxlsx")
install.packages("RPostgreSQL")
install.packages("dplyr")
library(openxlsx)

# 2) read and build fnction active_packages, which will read all packages from prvious point
# https://stackoverflow.com/questions/8175912/load-multiple-packages-at-once

active_packages <- function(pkg){
  new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
  if (length(new.pkg))
    install.packages(new.pkg, dependencies = TRUE)
  sapply(pkg, require, character.only = TRUE)
  print("packages ready")
}
packages <- c("devtools", "openxlsx", "RPostgreSQL", "dplyr")


# 3) run function active_packages in concolse and check whether "packages ready" text appreared

active_packages(packages)

# 4) load all data from szczegoly_rekompensat table into data frame called df_compensations

drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname ="postgres", host="localhost", port =5432, user ="postgres", password ="1234")
dbExistsTable(con,"szczegoly_rekompensat")
df_compensations <- dbGetQuery(con,"SELECT *FROM szczegoly_rekompensat")

# 5) check if table tab_1 exists in a connection defined in previous point

#install.packages("DBI")
#library(DBI)
# polecona instalacja pakietu DBI, zeby uzyskac dbExistTable

tabela_obecna <- dbExistsTable(con,"tab_1")    # https://www.rdocumentation.org/packages/DBI/versions/0.5-1/topics/dbExistsTable
tabela_obecna

# 6) print df_compensations data frame summary
library(dplyr)# czy to jest tutaj konieczne? bez tego nei działało
prze_filtrowane <- filter(df_compensations, df_compensations$kwota == "200")
# po_sortowane <- arrange(df_compensations, desc(data_otrzymania))# dlaczego nie moge tego wykonać, czy jest sekwencja, że najpierw jest filtrowanie, potem sortowanie i potem smmary???

po_sortowane <- arrange(prze_filtrowane, desc(data_otrzymania))
pod_sumowane <- summary(po_sortowane)

pod_sumowane
# VECTORS

# 7) create vector sample_vector which contains numbers 1,21,41 (don't use seq function) # http://www.r-tutor.com/r-introduction/vector

sample_vector <- c(1, 21, 41)     
sample_vector


# 8) create vector sample_vector_seq which contains numbers 1,21,41 (use seq function) #http://stat.ethz.ch/R-manual/R-devel/library/base/html/seq.html

sample_Vector_seq <- seq(from = 1, to = 41, by = 20)
sample_Vector_seq

# 9) Combine two vectors (sample_vector, sample_vector_seq) into new one: v_combined

v_combined <- c(sample_vector, sample_Vector_seq)
v_combined

# 10) Sort data descending in vector v_combined # https://stat.ethz.ch/R-manual/R-devel/library/base/html/sort.html

sort_vec <- sort(v_combined, decreasing = TRUE)
sort_vec

# 11) Create vector v_accounts created from df_compensations data frame, which will store data from 'konto' column # http://www.sthda.com/english/wiki/subsetting-data-frame-columns-in-r
# http://www.datacarpentry.org/R-ecology-lesson/03-dplyr.html

library(dplyr)
v_accounts <- select(df_compensations,5)
v_accounts

# 12) Check v_accounts vector length  # różnica między lenght  a  lengths ???

l_v_accounts <- lengths(v_accounts)
l_v_accounts

# 13) Because previously created vector containst duplicated values, we need a new vector (v_accounts_unique), with unique values. Print vector and check its length
# https://stackoverflow.com/questions/41906878/r-number-of-unique-values-in-a-column-of-data-frame

v_accounts_unique <- (unique(v_accounts[["kwota"]]))
v_accounts_unique
v_accounts_uni_len <- length(v_accounts_unique)
v_accounts_uni_len

# MATRIX

# 14) Create sample matrix called sample_matrix, 2 columns, 2 rows. Data: first row (998, 0), second row (1,1)
#http://www.r-tutor.com/r-introduction/matrix

sample_matrix <- matrix(
  c(998, 0, 1, 1),
  nrow = 2,
  byrow = TRUE
)

sample_matrix

# 15) Assign row and column names to sample_matrix. Rows: ("no cancer", "cancer"), Columns: ("no cancer", "cancer")

dimnames(sample_matrix) = list(
  c("no cancer", "cancer"),
  c("no cancer", "cancer")
)

sample_matrix

# 16) Create 4 variables: precision, recall, acuracy, fscore and calculate their result based on data from sample_matrix
# https://www.rdocumentation.org/packages/base/versions/3.4.3/topics/sample

T_N <- sample_matrix[1, 1]
T_N
F_P <- sample_matrix[1, 2]
F_P
F_N <- sample_matrix[2, 1]
F_N 
T_P <- sample_matrix[2, 2]
T_P

acuracy <- (T_N + T_P) / (T_N + F_P + F_N + T_P) 
acuracy
precision <- T_P/(F_P + T_P)
precision
recall <- T_P/(F_N + T_P)
recall
fscore <- 2 * ((precision * recall)/( precision + recall))
fscore


# 17) Create matrix gen_matrix with random data: 10 columns, 100 rows, random numbers from 1 to 50 inside

gen_metrix <- matrix(
  sample(1:50), 
         nrow = 100,
         ncol = 10, 
         byrow = TRUE)
gen_metrix

# LIST

# 18) Create list l_persons with 3 members from our course. Each person has: name, surname, test_results (vector), homework_results (vector)
# http://www.dummies.com/programming/r/how-to-create-a-list-in-r/

l_persons <-list(member=c("Marta Dopierała", "Ewa Marczewska", "Grzegorz Szyperek", "Mateusz Kieszkowski"), test_resultes=c(20, 21, 22, 23), homework_results=c(10, 11, 12, 13))
l_persons

# 19) Print first element from l_persons list (don't use $ sign)
#https://campus.datacamp.com/courses/free-introduction-to-r/chapter-6-lists?ex=6

l_persons[[1]][1]


# 20) Print first element from l_persons list (use $ sign)

print(l_persons$member[1]) 

# 21) Create list l_accounts_unique with unique values of 'konto' column from df_compensations data frame. Check l_accounts_unique type

l_accounts_unique <-list(unique(df_compensations$konto))
l_accounts_unique

# DATA FRAME

# 22) Create data frame df_comp_small with 4 columns from df_compensations data frame (id_agenta, data_otrzymania, kwota, konto)

df_comp_small <-data.frame(id_agenta = df_compensations$id_agenta, 
                           data_otrzymania = df_compensations$data_otrzymania, 
                           kwota=df_compensations$kwota, 
                           konto=df_compensations$konto)
df_comp_small

# 23) Create new data frame with aggregated data from df_comp_small (how many rows we have per each account, and what's the total value of recompensations in each account)

sum <- df_comp_small %>%
  group_by (konto)%>%
  summarise(rows =n(), rekomp= sum(kwota))
sum

# 24) Which agent recorded most recompensations (amount)? Is this the same who recorded most action?


agent_activity <- df_comp_small %>%
  group_by (id_agenta)%>%
  summarise (liczba =n(), agrekomp= sum(kwota))
agent_activity

# LOOPS and conditional instructions

# 25) Create loop (for) which will print random 100 values
# http://blog.revolutionanalytics.com/2009/02/how-to-choose-a-random-number-in-r.html

for (i in sample(1:100)) print(i)

# 26) Create loop (while) which will print random values (between 1 and 50) until 20 wont' appear
# https://www.datamentor.io/r-programming/while-loop

j <- sample(1:50)
while( j <= 50){
  print(j)
  break(j = 20)
}
print(j)


# 27) Add extra column into df_comp_small data frame called amount_category. 

df_comp_small["amount_category"] <- NA
colnames(df_comp_small)

# 28) Store data from df_comp_small into new table in DB

dbWriteTable(con, name="df_comp_small", df_comp_small)

dbWriteTable

# 29) Fill values in amount_category. All amounts below average: 'small', All amounts above avg: 'high'

avg_amount <- mean(df_comp_small$df_compensations.kwota)
df_comp_small$amount_category <- ifelse(df_comp_small$df_compensations.kwota > avg_amount, "high", "low")

# 30) Create function f_agent_stats which for given agent_id, will return total number of actions in all tables (analiza_wniosku, analiza_operatora etc)

# Nie wiem :(






